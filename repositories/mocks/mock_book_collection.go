// Code generated by MockGen. DO NOT EDIT.
// Source: book_collection.go
//
// Generated by this command:
//
//	mockgen -source=book_collection.go -destination=mocks/mock_book_collection.go
//
// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	repositories "github/Babe-piya/book-collection/repositories"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookCollectionRepo is a mock of BookCollectionRepo interface.
type MockBookCollectionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBookCollectionRepoMockRecorder
}

// MockBookCollectionRepoMockRecorder is the mock recorder for MockBookCollectionRepo.
type MockBookCollectionRepoMockRecorder struct {
	mock *MockBookCollectionRepo
}

// NewMockBookCollectionRepo creates a new mock instance.
func NewMockBookCollectionRepo(ctrl *gomock.Controller) *MockBookCollectionRepo {
	mock := &MockBookCollectionRepo{ctrl: ctrl}
	mock.recorder = &MockBookCollectionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookCollectionRepo) EXPECT() *MockBookCollectionRepoMockRecorder {
	return m.recorder
}

// CreateBookCollection mocks base method.
func (m *MockBookCollectionRepo) CreateBookCollection(ctx context.Context, bookCollection *repositories.BookCollection) (*repositories.BookCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookCollection", ctx, bookCollection)
	ret0, _ := ret[0].(*repositories.BookCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookCollection indicates an expected call of CreateBookCollection.
func (mr *MockBookCollectionRepoMockRecorder) CreateBookCollection(ctx, bookCollection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookCollection", reflect.TypeOf((*MockBookCollectionRepo)(nil).CreateBookCollection), ctx, bookCollection)
}

// GetBookCollectionByFilter mocks base method.
func (m *MockBookCollectionRepo) GetBookCollectionByFilter(ctx context.Context, filter repositories.BookCollection) ([]repositories.BookCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookCollectionByFilter", ctx, filter)
	ret0, _ := ret[0].([]repositories.BookCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookCollectionByFilter indicates an expected call of GetBookCollectionByFilter.
func (mr *MockBookCollectionRepoMockRecorder) GetBookCollectionByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookCollectionByFilter", reflect.TypeOf((*MockBookCollectionRepo)(nil).GetBookCollectionByFilter), ctx, filter)
}

// UpdateBookCollectionByID mocks base method.
func (m *MockBookCollectionRepo) UpdateBookCollectionByID(ctx context.Context, bookCollections repositories.BookCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookCollectionByID", ctx, bookCollections)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookCollectionByID indicates an expected call of UpdateBookCollectionByID.
func (mr *MockBookCollectionRepoMockRecorder) UpdateBookCollectionByID(ctx, bookCollections any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookCollectionByID", reflect.TypeOf((*MockBookCollectionRepo)(nil).UpdateBookCollectionByID), ctx, bookCollections)
}
